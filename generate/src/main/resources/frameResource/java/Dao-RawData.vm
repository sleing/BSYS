#set($vmType="dao")
#set($extension=".java")
#set($packageName="${entityClass.packages.replace('entity', $vmType)}")
#set($EntityNameUp="${entityClass.className}")
#set($EntityNameLow="${entityClass.className.substring(0,1).toLowerCase()}${entityClass.className.substring(1)}")
#set($className="${entityClass.className}${stringUtils.capitalize(${vmType})}")
#set($path="${config.serverPath}/src/main/java/${packageName.replace('.', '/')}")
#set($outputFile="${path}/$className${extension}")
package ${packageName};

import com.ddd.info.simple.dto.base.PageDTO;
import ${entityClass.clazz.name};
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Component;
import org.apache.ibatis.annotations.Param;
import java.util.List;

@Mapper
@Component(value = "${EntityNameLow}Dao")
public interface ${EntityNameUp}Dao {

    /**
    * 根据分页参数查询${entityClass.label}集合
    *
    * @param pageDTO 分页条件
    */
    public List<${EntityNameUp}> find${EntityNameUp}s(PageDTO pageDTO);

    /**
    * 查询全部${entityClass.label}集合
    *
    */
    public List<${EntityNameUp}> findAll${EntityNameUp}s();

    /**
    * 查询所有${entityClass.label}集合(只提取ID 和 Name)
    *
    */
    public List<${EntityNameUp}> findAll${EntityNameUp}sWithIdName();

    /**
    * 根据名称查询${entityClass.label}集合(只提取ID 和 Name)
    *
    * @param ${EntityNameLow}Name 名称
    */
    public List<${EntityNameUp}> find${EntityNameUp}sWithIdNameByName(@Param("${EntityNameLow}Name") String ${EntityNameLow}Name);

    /**
    * 根据ID查询指定的${entityClass.label}(只提取ID 和 Name)
    *
    * @param ${EntityNameLow}Id Id
    */
    public ${EntityNameUp} find${EntityNameUp}sWithIdNameById(@Param(" ${EntityNameLow}Id") Long ${EntityNameLow}Id);

    /**
    * 根据分页参数查询${entityClass.label}集合的数量
    *
    * @param pageDTO 分页条件
    */
    public Long find${EntityNameUp}TotalCount(PageDTO pageDTO);

    /**
    * 根据ID查询指定的${entityClass.label}
    *
    * @param ${EntityNameLow}Id Id
    */
    public ${EntityNameUp} find${EntityNameUp}(@Param("${EntityNameLow}Id") Long ${EntityNameLow}Id);

    /**
    * 根据ID查询指定的${entityClass.label}(包含外键)
    *
    * @param ${EntityNameLow}Id Id
    */
    public ${EntityNameUp} find${EntityNameUp}WithForeignName(@Param("${EntityNameLow}Id") Long ${EntityNameLow}Id);

    /**
    * 新增${entityClass.label}
    *
    * @param ${EntityNameLow} 实体对象
    */
    public Long save${EntityNameUp}(${EntityNameUp} ${EntityNameLow});

    /**
    * 更新${entityClass.label}
    *
    * @param ${EntityNameLow} 实体对象
    */
    public Long update${EntityNameUp}(${EntityNameUp} ${EntityNameLow});

    /**
    * 根据ID删除${entityClass.label}
    *
    * @param ${EntityNameLow}Id ID
    */
    public Long delete${EntityNameUp}(@Param("${EntityNameLow}Id") Long ${EntityNameLow}Id);

    /**
    *批量保存
    */
    public void save${EntityNameUp}s(List<${EntityNameUp}> ${EntityNameLow}s);

    /**
    *批量更新
    */
    public void update${EntityNameUp}s(List<${EntityNameUp}> ${EntityNameLow}s);


    /**
    * 根据关键字查询
    */
    public ${EntityNameUp} find${EntityNameUp}ByKeys(${EntityNameUp} ${EntityNameLow});

    /**
    *  导入根据关键字查询
    * @param ${EntityNameLow}s
    * @return
    */
    public List<${EntityNameUp}> import${EntityNameUp}ByKeys(@Param("${EntityNameLow}s") List<List>  ${EntityNameLow}s);
    }
