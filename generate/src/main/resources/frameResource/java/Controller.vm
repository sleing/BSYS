#set($vmType="controller")
#set($extension=".java")
#set($packageName="${entityClass.packages.replace('entity', $vmType)}")
#set($EntityNameUp="${entityClass.className}")
#set($EntityNameLow="${entityClass.className.substring(0,1).toLowerCase()}${entityClass.className.substring(1)}")
#set($className="${entityClass.className}${stringUtils.capitalize(${vmType})}")
#set($path="${config.serverPath}/src/main/java/${packageName.replace('.', '/')}")
#set($outputFile="${path}/$className${extension}")

#set($editDtoClassName="${EntityNameUp}EditDto")
#set($editDtoPackageName="${entityClass.packages.replace('entity', 'dto')}")

package ${packageName};

import org.springframework.security.access.prepost.PreAuthorize;
import com.mt.common.core.annotation.ApiPageParam;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.mt.common.core.web.base.PageDTO;
import com.mt.common.core.web.base.PageResultDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



import ${editDtoPackageName}.${editDtoClassName};
import ${entityClass.clazz.name};
import ${config.basePackage}.${entityClass.subSystemName}.service.${entityClass.moduleName}.${EntityNameUp}Service;
#foreach($columnInfo in $entityClass.columnInfos)
	#if($columnInfo.definitionType == "ForeignId")
import ${entityManager.getEntityClassByClassName($columnInfo.foreignEntity).clazz.name.replace("entity","service")}Service;
	#end
#end


@Api(tags = "${entityClass.label}")
@RestController
@RequestMapping("/api/${entityClass.subSystemName}/${entityClass.moduleName}/${EntityNameUp}")
@CrossOrigin(allowCredentials = "true")
public class ${className} {
private static Logger logger = LoggerFactory.getLogger(${className}.class);

#set($imports=$d4Util.createMap())

#set($import="@Autowired private ${EntityNameUp}Service ${EntityNameLow}Service;")
${d4Util.addMapItem($imports,$import,$import)}
	#foreach($columnInfo in $entityClass.columnInfos)
		#if($columnInfo.definitionType == "ForeignId")
			#set($import="@Autowired private ${columnInfo.foreignEntity}Service ${stringUtils.uncapitalize(${columnInfo.foreignEntity})}Service;")
			${d4Util.addMapItem($imports,$import,$import)}
		#end
	#end
	#foreach($import1 in $imports.values())
	${import1}
	#end

	/**
	* 根据分页参数查询${entityClass.label}集合
	*
	* @param pageDTO 分页条件
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:view')")
	@ApiOperation("分页查询${entityClass.label}")
	@ApiPageParam
	@PostMapping("/find${EntityNameUp}s")
	public PageResultDTO find${EntityNameUp}s(@RequestBody PageDTO pageDTO){
		return this.${EntityNameLow}Service.find${EntityNameUp}s(pageDTO);
	}

	/**
	* 根据ID查询指定的${entityClass.label}
	*
	* @param ${EntityNameLow}Id Id
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:view')")
	@ApiOperation("根据id查询${entityClass.label}")
	@ApiPageParam
	@PostMapping("/find${EntityNameUp}")
	public ${EntityNameUp} find${EntityNameUp}(@RequestParam Long ${EntityNameLow}Id){
		return this.${EntityNameLow}Service.find${EntityNameUp}(${EntityNameLow}Id);
	}

	/**
	* 根据ID查询指定的${entityClass.label}(包含外键名称)
	*
	* @param ${EntityNameLow}Id Id
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:view')")
	@ApiOperation("根据ID查询指定的${entityClass.label}(包含外键名称)")
	@PostMapping("/find${EntityNameUp}ForView")
	public ${EntityNameUp} find${EntityNameUp}ForView(@RequestParam Long ${EntityNameLow}Id){
		return this.${EntityNameLow}Service.find${EntityNameUp}WithForeignName(${EntityNameLow}Id);
	}

	/**
	* 根据ID查询指定的${entityClass.label}(包含${entityClass.label}和外键名称)
	*
	* @param ${EntityNameLow}Id Id
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:view')")
	@ApiOperation("根据ID查询指定的${entityClass.label}(包含${entityClass.label}和外键名称)")
	@PostMapping("/find${EntityNameUp}ForEdit")
	public ${EntityNameUp}EditDto find${EntityNameUp}ForEdit(@RequestParam Long ${EntityNameLow}Id){
		#set($editDto="${stringUtils.uncapitalize(${editDtoClassName})}")
		${editDtoClassName} ${editDto} = new ${editDtoClassName}();
		${editDto}.set${EntityNameUp}(this.${EntityNameLow}Service.find${EntityNameUp}WithForeignName(${EntityNameLow}Id));

		this.prepare${EntityNameUp}EditDto(${editDto});

		return ${editDto};
	}

	/**
	* 根据ID查询指定的${entityClass.label}(只提取ID 和 Name)
	*
	* @param ${EntityNameLow}Id Id
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:view')")
	@ApiOperation("根据ID查询指定的${entityClass.label}(只提取ID 和 Name)")
	@PostMapping("/find${EntityNameUp}sWithIdNameById")
	public ${EntityNameUp} find${EntityNameUp}sWithIdNameById(@RequestParam Long ${EntityNameLow}Id){
	return this.${EntityNameLow}Service.find${EntityNameUp}sWithIdNameById(${EntityNameLow}Id);
	}

	/**
	* 根据名称查询${entityClass.label}集合(只提取ID 和 Name)
	*
	* @param ${EntityNameLow}Name 名称
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:view')")
	@ApiOperation("根据名称查询${entityClass.label}集合(只提取ID 和 Name)")
	@PostMapping("/find${EntityNameUp}sWithIdNameByName")
	public List<${EntityNameUp}> find${EntityNameUp}sWithIdNameByName(@RequestParam String ${EntityNameLow}Name){
	return this.${EntityNameLow}Service.find${EntityNameUp}sWithIdNameByName(${EntityNameLow}Name);
	}


	/**
	* 创建新的${entityClass.label}
	*
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:add')")
	@ApiOperation("创建新的${entityClass.label}")
	@PostMapping("/create${EntityNameUp}")
	public ${EntityNameUp}EditDto create${EntityNameUp}(){
		#set($editDto="${stringUtils.uncapitalize(${editDtoClassName})}")
		${editDtoClassName} ${editDto} = new ${editDtoClassName}();
		${editDto}.set${EntityNameUp}(new ${EntityNameUp}());

		this.prepare${EntityNameUp}EditDto(${editDto});
		return ${editDto};
	}

	private void prepare${EntityNameUp}EditDto(${editDtoClassName} ${editDto}){
	#foreach($columnInfo in $entityClass.columnInfos)
		#if($columnInfo.definitionType == "ForeignId")
        //TODO: 以下代码可以注释掉，此行代码即时加载所有外键对象，以便选择。如果不在此加载，可以在界面上实现延迟加载。如果外键对象超过 500 行，建议采用延迟加载
		${editDto}.set${stringUtils.capitalize(${stringUtils.removeEnd(${columnInfo.fieldName},"Id")})}${columnInfo.foreignEntity}s(this.${stringUtils.uncapitalize(${columnInfo.foreignEntity})}Service.findAll${columnInfo.foreignEntity}sWithIdName());
		#end
	#end
	}

	/**
	* 新增保存${entityClass.label}
	*
	* @param ${EntityNameLow} 实体对象
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:add')")
	@ApiOperation("新增保存${entityClass.label}")
	@PostMapping("/save${EntityNameUp}")
	public ${EntityNameUp} save${EntityNameUp}(@RequestBody ${EntityNameUp} ${EntityNameLow}){
		return this.${EntityNameLow}Service.save${EntityNameUp}(${EntityNameLow});
	}

	/**
	* 修改保存${entityClass.label}
	*
	* @param ${EntityNameLow} 实体对象
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:update')")
	@ApiOperation("修改保存${entityClass.label}")
	@PostMapping("/update${EntityNameUp}")
	public ${EntityNameUp} update${EntityNameUp}(@RequestBody ${EntityNameUp} ${EntityNameLow}){
		return this.${EntityNameLow}Service.update${EntityNameUp}(${EntityNameLow});
	}

	/**
	* 根据ID删除${entityClass.label}
	*
	* @param ${EntityNameLow}Id ID
	*/
	@PreAuthorize("hasAuthority('${entityClass.subSystemName}:${entityClass.moduleName}:${EntityNameUp}:remove')")
	@ApiOperation("根据ID删除${entityClass.label}")
	@PostMapping("/delete${EntityNameUp}")
	public void delete${EntityNameUp}(@RequestParam Long ${EntityNameLow}Id){
		this.${EntityNameLow}Service.delete${EntityNameUp}(${EntityNameLow}Id);
	}



}

